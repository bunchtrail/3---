import random

# Матрица расстояний
матрица_расстояний = [
    [0, 4, 7, 5, 4],
    [4, 0, 7, 3, 2],
    [7, 7, 0, 6, 3],
    [5, 3, 6, 0, 1],
    [4, 2, 3, 1, 0]
]

def вычислить_расстояние(маршрут, матрица):
    расстояние = 0
    for i in range(len(маршрут) - 1):
        расстояние += матрица[маршрут[i]-1][маршрут[i+1]-1]
    расстояние += матрица[маршрут[-1]-1][маршрут[0]-1]  # Возврат в начальный город
    return расстояние

def изощренный_кроссовер(родитель1, родитель2):
    размер = len(родитель1)
    потомок = [None]*размер
    a, b = sorted(random.sample(range(размер), 2))
    потомок[a:b+1] = родитель1[a:b+1]
    позиция = (b+1)%размер
    for ген in родитель2:
        if ген not in потомок:
            потомок[позиция] = ген
            позиция = (позиция + 1) % размер
    return потомок

# Инициализация
города = [1, 2, 3, 4, 5]
поколение = 1
поколения_без_изменений = 0
лучшее_расстояние = None
максимум_поколений = 10

while поколение <= максимум_поколений and поколения_без_изменений < 5:
    print(f"\nПоколение {поколение}:")
    # Создание начальной популяции
    популяция = []
    while len(популяция) < 4:
        маршрут = random.sample(города, len(города))
        if маршрут not in популяция:
            популяция.append(маршрут)

    расстояния_родителей = []
    for маршрут in популяция:
        расстояние = вычислить_расстояние(маршрут, матрица_расстояний)
        расстояния_родителей.append(расстояние)

    # Скрещивание
    потомки = []
    расстояния_потомков = []
    for i in range(4):
        родитель1 = популяция[i]
        родитель2 = популяция[(i+1)%4]
        потомок = изощренный_кроссовер(родитель1, родитель2)
        потомки.append(потомок)
        расстояние = вычислить_расстояние(потомок, матрица_расстояний)
        расстояния_потомков.append(расстояние)

    # Таблица решения
    print("Таблица решения:")
    print("{:<30} {:<25} {:<30} {:<25}".format("Родительские маршруты", "Расстояние маршрута", "Маршруты-потомки", "Расстояние потомка"))
    for i in range(4):
        родитель = популяция[i]
        потомок = потомки[i]
        print("{:<30} {:<25} {:<30} {:<25}".format(
            str(родитель),
            расстояния_родителей[i],
            str(потомок),
            расстояния_потомков[i]
        ))

    все_маршруты = популяция + потомки
    все_расстояния = расстояния_родителей + расстояния_потомков

    минимальное_расстояние = min(все_расстояния)
    индекс_лучшего = все_расстояния.index(минимальное_расстояние)
    лучший_маршрут = все_маршруты[индекс_лучшего]

    print(f"\nЛучший маршрут в поколении {поколение}: {лучший_маршрут} с расстоянием {минимальное_расстояние}")

    if лучшее_расстояние == минимальное_расстояние:
        поколения_без_изменений += 1
    else:
        поколения_без_изменений = 0
        лучшее_расстояние = минимальное_расстояние

    популяция = random.sample(все_маршруты, 4)
    поколение += 1

print(f"\nОптимальный маршрут: {лучший_маршрут} с общим расстоянием {лучшее_расстояние}")
